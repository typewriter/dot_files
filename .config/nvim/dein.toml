# General
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nmap <F7> :NERDTreeToggle<CR>
nmap <silent> <C-t> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=22
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=18
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=2000
set signcolumn=yes
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <F8> :TagbarToggle<CR>
"autocmd VimEnter * nested :call tagbar#autoopen(1)
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'vim-airline/vim-airline'

hook_add = '''
let g:airline_theme = 'wombat'
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%F'
let g:airline_section_x = '%{&filetype}'
let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
let g:airline#extensions#ale#error_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1

let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_set_highlights = 0
let g:ale_sign_error = ' '
let g:ale_sign_warning = ' '
let g:ale_linters = {
  \ 'markdown': ['textlint']
  \ }
let g:ale_completion_enabled = 0
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'coc#util#install()'
hook_add = '''
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> rn <Plug>(coc-rename)
autocmd CursorHold * silent call CocActionAsync('highlight')
'''

# Format
[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tomtom/tcomment_vim'

# Language, Framework
[[plugins]]
repo = 'tpope/vim-rails'
